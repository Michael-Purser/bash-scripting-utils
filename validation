#!/bin/bash

# Source guard
[[ -n "${_BASH_SCRIPTING_UTILS_VALIDATION}" ]] && return; readonly _BASH_SCRIPTING_UTILS_VALIDATION=1

source "${BASH_SOURCE%/*}/logging"

ask_proceed()
{
    read -p "proceed? [Y/y to proceed] " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "exiting on user request"
        exit 0
    fi
}

check_argument_not_empty()
{
    arg_name="${1}"
    arg_value="${2}"
    debug "checking argument '${arg_name}' is set"
    if [ -z "${arg_value}" ]; then
        error "argument '${arg_name}' must be set" && exit 1
    fi
}

check_array_contains()
{
  # common bash trick; if you pass an array, it must always be the last argument:
  #   we tell bash to process the first argument
  #   then we shift the arguments to remove the first argument
  #   then we can group all remaining arguments into an array and recreate the original array

  local value="${1}"
  shift
  local array=("$@")

  local match=1
  for array_element in "${array[@]}"; do
    if [[ "${array_element}" == "${value}" ]]; then
      match=0
    fi
  done

  return ${match}
}

check_does_not_contain_character()
{
    variable="${1}"
    character="${2}"
    if [[ "${variable}" = *${character}* ]]; then
        error "illegal character '${character}' in '${variable}'" && exit 1
    fi
}

check_dir_exists()
{
    dir="${1}"
    debug "checking directory '${dir}' exists"
    if [ ! -d "${dir}" ]; then
        error "directory does not exist: ${dir}" && exit 1
    fi
}

check_file_exists()
{
    file="${1}"
    debug "checking file '${file}' exists"
    if [ ! -f "${file}" ]; then
        error "file does not exist: ${file}" && exit 1
    fi
}

check_file_has_extension()
{
    file="${1}"
    extension="${2}"
    debug "checking file '${file}' has extension .${extension}"
    if [[ "${file}" != *.${extension} ]]; then
        error "file does not have .${extension} extension: ${file}" && exit 1
    fi
}

check_is_absolute_path()
{
    path="${1}"
    debug "checking path '${path}' is an absolute path"
    if [[ "${path}" != /* ]]; then
        error "path is not absolute: ${path}" && exit 1
    fi
}

check_is_integer()
{
    variable="${1}"
    debug "checking variable '${variable}' is an integer"
    if [[ "${variable}" =~ [^0-9]+$ ]]; then
        error "not an integer: ${variable}" && exit 1
    fi
}

check_integer_greater_than()
{
    variable="${1}"
    lower="${2}"
    debug "checking integer '${variable}' is greater than ${lower}"
    if [ "$1" -le "${lower}" ]; then
        error "integer not greater than ${lower}: ${variable}" && exit 1
    fi
}

check_integer_less_than()
{
    variable="${1}"
    upper="${2}"
    debug "checking integer '${variable}' is less than ${upper}"
    if [ "$1" -ge "${upper}" ]; then
        error "integer not less than ${upper}: ${variable}" && exit 1
    fi
}

check_integer_in_range()
{
    variable="${1}"
    lower="${2}"
    upper="${3}"
    debug "checking integer '${variable}' is in range [${lower}; ${upper}]"
    if [ "$1" -lt "${lower}" ] || [ "$1" -gt "${upper}" ]; then
        error "integer not in range [${lower}; ${upper}]: ${variable}" && exit 1
    fi
}

check_is_valid_ip()
{
    ip_address="${1}"
    debug "checking '${ip_address}' is a valid IP address"
    old_IFS="${IFS}"
    IFS='.' read -ra IP_ADDR_ARRAY <<< "${ip_address}"
    IFS="${old_IFS}"

    debug "checking ip address '${ip_address}' has correct format"
    if [ ${#IP_ADDR_ARRAY[@]} != 4 ]; then
        error "IP address has invalid format: ${ip_address}" && exit 1
    fi

    for i in "${IP_ADDR_ARRAY[@]}"; do
        check_is_integer "${i}"
        check_integer_in_range "${i}" 0 255
    done
}

ensure_sudo()
{
    sudo echo "" &>/dev/null
}

